clear;
close all;

load ../matlab_data/mckibben_pam_contraction_ratio.mat
load ../matlab_data/require_pressure_calculation_data.mat muscle_data

length_terminalend = 5.9;
length_inputconnector = 8.4;

SAVE_FIGURES = true;

for muscle_index = 2 : 11  
    tendon_length = 0; % Set initial length as 0
    fig = figure("units", "normalized", "outerposition", [0, 0, 1, 1]); % Print a figure    
    for tendon_length_index = 1 : 10
        muscle_length_initial = muscle_data{muscle_index, 2} - (length_inputconnector + length_terminalend + tendon_length); % Calculate initial PAM length
        muscle_length_pressurize = (ones(size(contraction_ratio_pressurize)) - contraction_ratio_pressurize) * muscle_length_initial; % Muscle lenght w.r.t. pressures
        muscle_length_depressurize = (ones(size(contraction_ratio_depressurize)) - contraction_ratio_depressurize) * muscle_length_initial; % Muscle lenght w.r.t. pressures
        normalized_muscle_length_pressurize = (muscle_length_pressurize + length_terminalend + length_inputconnector + tendon_length) / muscle_data{muscle_index, 2};
        normalized_muscle_length_depressurize = (muscle_length_depressurize + length_terminalend + length_inputconnector + tendon_length) / muscle_data{muscle_index, 2};
        
        subplot(2, 5, tendon_length_index); % Subplots for each tendon lengths
        set(gca, "Fontsize", 14);
        xlabel("Pressure [MPa]");
        ylabel("Normalized muscle length ("+muscle_data{muscle_index, 1}+")");
        xlim([0, 0.5]);
        ylim([0.75, 1]);
        xticks([0, 0.1, 0.2, 0.3, 0.4, 0.5]);
        title("L_{tendon} = "+num2str(tendon_length)+" [mm]");
        grid on;
        hold on;
        p_upward = plot(air_pressure_MPa, normalized_muscle_length_pressurize);
        p_upward.Marker = "o";
        p_upward.LineWidth = 1.5;
        p_downward = plot(air_pressure_MPa, normalized_muscle_length_depressurize);
        p_downward.Marker = "o";
        p_downward.LineWidth = 1.5;
        tendon_length = tendon_length + 10;
        switch(muscle_index) % Plot the minimum values of normalized muscle lengths
            case 2
                p_min = yline(min(muscle_data{2, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
            case 3
                p_min = yline(min(muscle_data{3, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
            case 4
                p_min = yline(min(muscle_data{4, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
            case 5
                p_min = yline(min(muscle_data{5, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
            case 6
                p_min = yline(min(muscle_data{6, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
            case {7, 8, 9}
                p_min = yline(min(muscle_data{7, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
            case 10
                p_min = yline(min(muscle_data{10, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
            case 11
                p_min = yline(min(muscle_data{11, 2}));
                p_min.LineStyle = "--";
                p_min.LineWidth = 1.5;
                p_min.Label = "Min.";
        end
    end
    % Save figure if option is enabled
    if SAVE_FIGURES
        try
            % Create a directory for saving figures if it doesn't exist
            save_dir = fullfile('..', 'saved_figures', 'muscle_length_wrt_pressure');
            if ~exist(save_dir, 'dir')
                mkdir(save_dir);
            end
    
            % Generate a valid filename
            muscle_name = muscle_data{muscle_index, 1};
            if iscell(muscle_name)
                muscle_name = muscle_name{1};  % Extract string from cell if it's a cell array
            end
            muscle_name = char(muscle_name);  % Convert to char array if it's a string
            muscle_name = strtrim(muscle_name);  % Remove any leading/trailing whitespace
            muscle_name = regexprep(muscle_name, '\s+', '_');  % Replace any remaining whitespace with underscores
            filename = muscle_name;
            filename = matlab.lang.makeValidName(filename);
            
            % Debug output
            disp(['Muscle name: ', muscle_name{1}]);
            disp(['Generated filename: ', filename]);
            
            % Create full file paths
            fig_path = fullfile(save_dir, [filename, '.fig']);
            svg_path = fullfile(save_dir, [filename, '.svg']);
            
            % Debug output
            disp(['Fig path: ', fig_path]);
            disp(['SVG path: ', svg_path]);
            
            % Save as .fig
            saveas(fig, fig_path, 'fig');
            
            % Save as .svg
            saveas(fig, svg_path, 'svg');
            
            fprintf('Saved figure: %s\n', filename);
        catch err
            warning('Failed to save figure: %s\nError: %s', filename, err.message);
            % Additional debug information
            disp(['Error occurred with muscle: ', muscle_name{1}]);
            disp(['Current working directory: ', pwd]);
            disp(['Save directory: ', save_dir]);
        end
    end
end